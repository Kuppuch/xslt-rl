import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.w3c.dom.Document;
import org.w3c.dom.DOMException;

// For write operation
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.stream.StreamResult;
import java.io.*;
import java.util.Objects;


public class Trasformer {
    // Global value so it can be ref'd by the tree-adapter
    static Document document;

    public static void main(String[] argv) throws ParserConfigurationException, IOException, SAXException, TransformerException {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

        //factory.setNamespaceAware(true);
        //factory.setValidating(true);
//        try {
            File stylesheet = new File(Objects.requireNonNull(Stylizer.class.getClassLoader().getResource("converter.xsl")).getFile());
            File datafile = new File(Objects.requireNonNull(Stylizer.class.getClassLoader().getResource("example.xml")).getFile());

            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse(datafile);

            // Use a Transformer for output
            TransformerFactory tFactory = TransformerFactory.newInstance();
            StreamSource stylesource = new StreamSource(stylesheet);
            Transformer transformer = tFactory.newTransformer(stylesource);

            DOMSource source = new DOMSource(document);

            FileOutputStream fos = new FileOutputStream(".\\myfile.html");
            StreamResult result = new StreamResult(fos);
            transformer.transform(source, result);
//        } catch (TransformerConfigurationException tce) {
//            // Error generated by the parser
//            System.out.println("\n** Transformer Factory error");
//            System.out.println("   " + tce.getMessage());
//
//            // Use the contained exception, if any
//            Throwable x = tce;
//
//            if (tce.getException() != null) {
//                x = tce.getException();
//            }
//
//            x.printStackTrace();
//        } catch (TransformerException te) {
//            // Error generated by the parser
//            System.out.println("\n** Transformation error");
//            System.out.println("   " + te.getMessage());
//
//            // Use the contained exception, if any
//            Throwable x = te;
//
//            if (te.getException() != null) {
//                x = te.getException();
//            }
//
//            x.printStackTrace();
//        } catch (SAXException sxe) {
//            // Error generated by this application
//            // (or a parser-initialization error)
//            Exception x = sxe;
//
//            if (sxe.getException() != null) {
//                x = sxe.getException();
//            }
//
//            x.printStackTrace();
//        } catch (ParserConfigurationException pce) {
//            // Parser with specified options can't be built
//            pce.printStackTrace();
//        } catch (IOException ioe) {
//            // I/O error
//            ioe.printStackTrace();
//        }
    }
}
